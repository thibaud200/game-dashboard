import { 
  CreateCharacterSchema, 
  UpdateCharacterSchema, 
  BulkCreateCharactersSchema 
} from './validation/schemas';

console.log('üß™ Test de validation Zod pour les Characters\n');

// Test 1: Donn√©es valides pour cr√©er un personnage
console.log('‚úÖ Test 1: Cr√©ation de personnage avec donn√©es valides');
try {
  const validCharacter = CreateCharacterSchema.parse({
    game_id: 1,
    character_key: 'wizard',
    name: 'Gandalf le Gris',
    description: 'Un puissant magicien',
    avatar: 'https://example.com/gandalf.jpg',
    abilities: ['Magic', 'Wisdom']
  });
  console.log('  ‚úì Validation r√©ussie:', validCharacter);
} catch (error) {
  console.log('  ‚ùå Validation √©chou√©e:', error);
}

// Test 2: Donn√©es invalides pour cr√©er un personnage
console.log('\n‚ùå Test 2: Cr√©ation de personnage avec donn√©es invalides');
try {
  CreateCharacterSchema.parse({
    game_id: -1, // Invalide
    character_key: '', // Vide
    name: '', // Vide
    avatar: 'not-a-url', // URL invalide
    abilities: 'not-an-array' // Pas un tableau
  });
  console.log('  ‚ùå La validation aurait d√ª √©chouer!');
} catch (error: any) {
  console.log('  ‚úì Validation √©chou√©e comme attendu:');
  if (error.errors) {
    error.errors.forEach((err: any) => {
      console.log(`    - ${err.path.join('.')}: ${err.message}`);
    });
  }
}

// Test 3: Mise √† jour avec donn√©es valides
console.log('\n‚úÖ Test 3: Mise √† jour de personnage avec donn√©es valides');
try {
  const validUpdate = UpdateCharacterSchema.parse({
    name: 'Gandalf le Blanc',
    description: 'Maintenant encore plus puissant'
  });
  console.log('  ‚úì Validation r√©ussie:', validUpdate);
} catch (error) {
  console.log('  ‚ùå Validation √©chou√©e:', error);
}

// Test 4: Mise √† jour sans aucun champ
console.log('\n‚ùå Test 4: Mise √† jour sans aucun champ');
try {
  UpdateCharacterSchema.parse({});
  console.log('  ‚ùå La validation aurait d√ª √©chouer!');
} catch (error: any) {
  console.log('  ‚úì Validation √©chou√©e comme attendu:', error.message);
}

// Test 5: Cr√©ation en lot valide
console.log('\n‚úÖ Test 5: Cr√©ation en lot avec donn√©es valides');
try {
  const validBulk = BulkCreateCharactersSchema.parse({
    gameId: 1,
    characters: [
      {
        character_key: 'frodo',
        name: 'Frodo Baggins',
        description: 'Un hobbit courageux'
      },
      {
        character_key: 'aragorn',
        name: 'Aragorn',
        description: 'Le roi du Gondor',
        abilities: ['Sword Fighting', 'Leadership']
      }
    ]
  });
  console.log('  ‚úì Validation r√©ussie:', validBulk);
} catch (error) {
  console.log('  ‚ùå Validation √©chou√©e:', error);
}

console.log('\nüéâ Tests de validation termin√©s!');